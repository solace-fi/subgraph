// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimProcessed extends ethereum.Event {
  get params(): ClaimProcessed__Params {
    return new ClaimProcessed__Params(this);
  }
}

export class ClaimProcessed__Params {
  _event: ClaimProcessed;

  constructor(event: ClaimProcessed) {
    this._event = event;
  }

  get claimId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get claimant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DepositMade extends ethereum.Event {
  get params(): DepositMade__Params {
    return new DepositMade__Params(this);
  }
}

export class DepositMade__Params {
  _event: DepositMade;

  constructor(event: DepositMade) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyShutdown extends ethereum.Event {
  get params(): EmergencyShutdown__Params {
    return new EmergencyShutdown__Params(this);
  }
}

export class EmergencyShutdown__Params {
  _event: EmergencyShutdown;

  constructor(event: EmergencyShutdown) {
    this._event = event;
  }

  get active(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class GovernanceTransferred extends ethereum.Event {
  get params(): GovernanceTransferred__Params {
    return new GovernanceTransferred__Params(this);
  }
}

export class GovernanceTransferred__Params {
  _event: GovernanceTransferred;

  constructor(event: GovernanceTransferred) {
    this._event = event;
  }

  get _newGovernance(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StrategyAdded extends ethereum.Event {
  get params(): StrategyAdded__Params {
    return new StrategyAdded__Params(this);
  }
}

export class StrategyAdded__Params {
  _event: StrategyAdded;

  constructor(event: StrategyAdded) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get debtRatio(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get minDebtPerHarvest(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get maxDebtPerHarvest(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get performanceFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class StrategyAddedToQueue extends ethereum.Event {
  get params(): StrategyAddedToQueue__Params {
    return new StrategyAddedToQueue__Params(this);
  }
}

export class StrategyAddedToQueue__Params {
  _event: StrategyAddedToQueue;

  constructor(event: StrategyAddedToQueue) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StrategyRemovedFromQueue extends ethereum.Event {
  get params(): StrategyRemovedFromQueue__Params {
    return new StrategyRemovedFromQueue__Params(this);
  }
}

export class StrategyRemovedFromQueue__Params {
  _event: StrategyRemovedFromQueue;

  constructor(event: StrategyRemovedFromQueue) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StrategyReported extends ethereum.Event {
  get params(): StrategyReported__Params {
    return new StrategyReported__Params(this);
  }
}

export class StrategyReported__Params {
  _event: StrategyReported;

  constructor(event: StrategyReported) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get gain(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get loss(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get debtPaid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalGain(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalLoss(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalDebt(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get debtAdded(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get debtRatio(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class StrategyRevoked extends ethereum.Event {
  get params(): StrategyRevoked__Params {
    return new StrategyRevoked__Params(this);
  }
}

export class StrategyRevoked__Params {
  _event: StrategyRevoked;

  constructor(event: StrategyRevoked) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StrategyUpdateDebtRatio extends ethereum.Event {
  get params(): StrategyUpdateDebtRatio__Params {
    return new StrategyUpdateDebtRatio__Params(this);
  }
}

export class StrategyUpdateDebtRatio__Params {
  _event: StrategyUpdateDebtRatio;

  constructor(event: StrategyUpdateDebtRatio) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newDebtRatio(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StrategyUpdateMaxDebtPerHarvest extends ethereum.Event {
  get params(): StrategyUpdateMaxDebtPerHarvest__Params {
    return new StrategyUpdateMaxDebtPerHarvest__Params(this);
  }
}

export class StrategyUpdateMaxDebtPerHarvest__Params {
  _event: StrategyUpdateMaxDebtPerHarvest;

  constructor(event: StrategyUpdateMaxDebtPerHarvest) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newMaxDebtPerHarvest(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StrategyUpdateMinDebtPerHarvest extends ethereum.Event {
  get params(): StrategyUpdateMinDebtPerHarvest__Params {
    return new StrategyUpdateMinDebtPerHarvest__Params(this);
  }
}

export class StrategyUpdateMinDebtPerHarvest__Params {
  _event: StrategyUpdateMinDebtPerHarvest;

  constructor(event: StrategyUpdateMinDebtPerHarvest) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newMinDebtPerHarvest(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StrategyUpdatePerformanceFee extends ethereum.Event {
  get params(): StrategyUpdatePerformanceFee__Params {
    return new StrategyUpdatePerformanceFee__Params(this);
  }
}

export class StrategyUpdatePerformanceFee__Params {
  _event: StrategyUpdatePerformanceFee;

  constructor(event: StrategyUpdatePerformanceFee) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPerformanceFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateWithdrawalQueue extends ethereum.Event {
  get params(): UpdateWithdrawalQueue__Params {
    return new UpdateWithdrawalQueue__Params(this);
  }
}

export class UpdateWithdrawalQueue__Params {
  _event: UpdateWithdrawalQueue;

  constructor(event: UpdateWithdrawalQueue) {
    this._event = event;
  }

  get queue(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class WithdrawalMade extends ethereum.Event {
  get params(): WithdrawalMade__Params {
    return new WithdrawalMade__Params(this);
  }
}

export class WithdrawalMade__Params {
  _event: WithdrawalMade;

  constructor(event: WithdrawalMade) {
    this._event = event;
  }

  get withdrawer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Vault__strategiesResultValue0Struct extends ethereum.Tuple {
  get performanceFee(): BigInt {
    return this[0].toBigInt();
  }

  get activation(): BigInt {
    return this[1].toBigInt();
  }

  get debtRatio(): BigInt {
    return this[2].toBigInt();
  }

  get minDebtPerHarvest(): BigInt {
    return this[3].toBigInt();
  }

  get maxDebtPerHarvest(): BigInt {
    return this[4].toBigInt();
  }

  get lastReport(): BigInt {
    return this[5].toBigInt();
  }

  get totalDebt(): BigInt {
    return this[6].toBigInt();
  }

  get totalGain(): BigInt {
    return this[7].toBigInt();
  }

  get totalLoss(): BigInt {
    return this[8].toBigInt();
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  activation(): BigInt {
    let result = super.call("activation", "activation():(uint256)", []);

    return result[0].toBigInt();
  }

  try_activation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("activation", "activation():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  creditAvailable(strategy: Address): BigInt {
    let result = super.call(
      "creditAvailable",
      "creditAvailable(address):(uint256)",
      [ethereum.Value.fromAddress(strategy)]
    );

    return result[0].toBigInt();
  }

  try_creditAvailable(strategy: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "creditAvailable",
      "creditAvailable(address):(uint256)",
      [ethereum.Value.fromAddress(strategy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtOutstanding(strategy: Address): BigInt {
    let result = super.call(
      "debtOutstanding",
      "debtOutstanding(address):(uint256)",
      [ethereum.Value.fromAddress(strategy)]
    );

    return result[0].toBigInt();
  }

  try_debtOutstanding(strategy: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "debtOutstanding",
      "debtOutstanding(address):(uint256)",
      [ethereum.Value.fromAddress(strategy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtRatio(): BigInt {
    let result = super.call("debtRatio", "debtRatio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_debtRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("debtRatio", "debtRatio():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delegatedAssets(): BigInt {
    let result = super.call(
      "delegatedAssets",
      "delegatedAssets():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_delegatedAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegatedAssets",
      "delegatedAssets():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  emergencyShutdown(): boolean {
    let result = super.call(
      "emergencyShutdown",
      "emergencyShutdown():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_emergencyShutdown(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "emergencyShutdown",
      "emergencyShutdown():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  expectedReturn(strategy: Address): BigInt {
    let result = super.call(
      "expectedReturn",
      "expectedReturn(address):(uint256)",
      [ethereum.Value.fromAddress(strategy)]
    );

    return result[0].toBigInt();
  }

  try_expectedReturn(strategy: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "expectedReturn",
      "expectedReturn(address):(uint256)",
      [ethereum.Value.fromAddress(strategy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastReport(): BigInt {
    let result = super.call("lastReport", "lastReport():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastReport(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastReport", "lastReport():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockedProfit(): BigInt {
    let result = super.call("lockedProfit", "lockedProfit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockedProfit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockedProfit", "lockedProfit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockedProfitDegration(): BigInt {
    let result = super.call(
      "lockedProfitDegration",
      "lockedProfitDegration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lockedProfitDegration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockedProfitDegration",
      "lockedProfitDegration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  managementFee(): BigInt {
    let result = super.call("managementFee", "managementFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_managementFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managementFee",
      "managementFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxRedeemableShares(user: Address): BigInt {
    let result = super.call(
      "maxRedeemableShares",
      "maxRedeemableShares(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_maxRedeemableShares(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxRedeemableShares",
      "maxRedeemableShares(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minCapitalRequirement(): BigInt {
    let result = super.call(
      "minCapitalRequirement",
      "minCapitalRequirement():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minCapitalRequirement(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minCapitalRequirement",
      "minCapitalRequirement():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  newGovernance(): Address {
    let result = super.call("newGovernance", "newGovernance():(address)", []);

    return result[0].toAddress();
  }

  try_newGovernance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newGovernance",
      "newGovernance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  performanceFee(): BigInt {
    let result = super.call("performanceFee", "performanceFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_performanceFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performanceFee",
      "performanceFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  report(gain: BigInt, loss: BigInt, _debtPayment: BigInt): BigInt {
    let result = super.call(
      "report",
      "report(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(gain),
        ethereum.Value.fromUnsignedBigInt(loss),
        ethereum.Value.fromUnsignedBigInt(_debtPayment)
      ]
    );

    return result[0].toBigInt();
  }

  try_report(
    gain: BigInt,
    loss: BigInt,
    _debtPayment: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "report",
      "report(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(gain),
        ethereum.Value.fromUnsignedBigInt(loss),
        ethereum.Value.fromUnsignedBigInt(_debtPayment)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewards(): Address {
    let result = super.call("rewards", "rewards():(address)", []);

    return result[0].toAddress();
  }

  try_rewards(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewards", "rewards():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  strategies(_strategy: Address): Vault__strategiesResultValue0Struct {
    let result = super.call(
      "strategies",
      "strategies(address):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(_strategy)]
    );

    return result[0].toTuple() as Vault__strategiesResultValue0Struct;
  }

  try_strategies(
    _strategy: Address
  ): ethereum.CallResult<Vault__strategiesResultValue0Struct> {
    let result = super.tryCall(
      "strategies",
      "strategies(address):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(_strategy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Vault__strategiesResultValue0Struct
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalAssets(): BigInt {
    let result = super.call("totalAssets", "totalAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalAssets", "totalAssets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDebt(): BigInt {
    let result = super.call("totalDebt", "totalDebt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalDebt", "totalDebt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdraw(shares: BigInt, maxLoss: BigInt): BigInt {
    let result = super.call("withdraw", "withdraw(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromUnsignedBigInt(maxLoss)
    ]);

    return result[0].toBigInt();
  }

  try_withdraw(shares: BigInt, maxLoss: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromUnsignedBigInt(maxLoss)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawalQueue(param0: BigInt): Address {
    let result = super.call(
      "withdrawalQueue",
      "withdrawalQueue(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_withdrawalQueue(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "withdrawalQueue",
      "withdrawalQueue(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _registry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AcceptGovernanceCall extends ethereum.Call {
  get inputs(): AcceptGovernanceCall__Inputs {
    return new AcceptGovernanceCall__Inputs(this);
  }

  get outputs(): AcceptGovernanceCall__Outputs {
    return new AcceptGovernanceCall__Outputs(this);
  }
}

export class AcceptGovernanceCall__Inputs {
  _call: AcceptGovernanceCall;

  constructor(call: AcceptGovernanceCall) {
    this._call = call;
  }
}

export class AcceptGovernanceCall__Outputs {
  _call: AcceptGovernanceCall;

  constructor(call: AcceptGovernanceCall) {
    this._call = call;
  }
}

export class AddStrategyCall extends ethereum.Call {
  get inputs(): AddStrategyCall__Inputs {
    return new AddStrategyCall__Inputs(this);
  }

  get outputs(): AddStrategyCall__Outputs {
    return new AddStrategyCall__Outputs(this);
  }
}

export class AddStrategyCall__Inputs {
  _call: AddStrategyCall;

  constructor(call: AddStrategyCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _debtRatio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minDebtPerHarvest(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maxDebtPerHarvest(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _performanceFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AddStrategyCall__Outputs {
  _call: AddStrategyCall;

  constructor(call: AddStrategyCall) {
    this._call = call;
  }
}

export class AddStrategyToQueueCall extends ethereum.Call {
  get inputs(): AddStrategyToQueueCall__Inputs {
    return new AddStrategyToQueueCall__Inputs(this);
  }

  get outputs(): AddStrategyToQueueCall__Outputs {
    return new AddStrategyToQueueCall__Outputs(this);
  }
}

export class AddStrategyToQueueCall__Inputs {
  _call: AddStrategyToQueueCall;

  constructor(call: AddStrategyToQueueCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddStrategyToQueueCall__Outputs {
  _call: AddStrategyToQueueCall;

  constructor(call: AddStrategyToQueueCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositWethCall extends ethereum.Call {
  get inputs(): DepositWethCall__Inputs {
    return new DepositWethCall__Inputs(this);
  }

  get outputs(): DepositWethCall__Outputs {
    return new DepositWethCall__Outputs(this);
  }
}

export class DepositWethCall__Inputs {
  _call: DepositWethCall;

  constructor(call: DepositWethCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositWethCall__Outputs {
  _call: DepositWethCall;

  constructor(call: DepositWethCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class ProcessClaimCall extends ethereum.Call {
  get inputs(): ProcessClaimCall__Inputs {
    return new ProcessClaimCall__Inputs(this);
  }

  get outputs(): ProcessClaimCall__Outputs {
    return new ProcessClaimCall__Outputs(this);
  }
}

export class ProcessClaimCall__Inputs {
  _call: ProcessClaimCall;

  constructor(call: ProcessClaimCall) {
    this._call = call;
  }

  get claimant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ProcessClaimCall__Outputs {
  _call: ProcessClaimCall;

  constructor(call: ProcessClaimCall) {
    this._call = call;
  }
}

export class RemoveStrategyFromQueueCall extends ethereum.Call {
  get inputs(): RemoveStrategyFromQueueCall__Inputs {
    return new RemoveStrategyFromQueueCall__Inputs(this);
  }

  get outputs(): RemoveStrategyFromQueueCall__Outputs {
    return new RemoveStrategyFromQueueCall__Outputs(this);
  }
}

export class RemoveStrategyFromQueueCall__Inputs {
  _call: RemoveStrategyFromQueueCall;

  constructor(call: RemoveStrategyFromQueueCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveStrategyFromQueueCall__Outputs {
  _call: RemoveStrategyFromQueueCall;

  constructor(call: RemoveStrategyFromQueueCall) {
    this._call = call;
  }
}

export class ReportCall extends ethereum.Call {
  get inputs(): ReportCall__Inputs {
    return new ReportCall__Inputs(this);
  }

  get outputs(): ReportCall__Outputs {
    return new ReportCall__Outputs(this);
  }
}

export class ReportCall__Inputs {
  _call: ReportCall;

  constructor(call: ReportCall) {
    this._call = call;
  }

  get gain(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get loss(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _debtPayment(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ReportCall__Outputs {
  _call: ReportCall;

  constructor(call: ReportCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RevokeStrategyCall extends ethereum.Call {
  get inputs(): RevokeStrategyCall__Inputs {
    return new RevokeStrategyCall__Inputs(this);
  }

  get outputs(): RevokeStrategyCall__Outputs {
    return new RevokeStrategyCall__Outputs(this);
  }
}

export class RevokeStrategyCall__Inputs {
  _call: RevokeStrategyCall;

  constructor(call: RevokeStrategyCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeStrategyCall__Outputs {
  _call: RevokeStrategyCall;

  constructor(call: RevokeStrategyCall) {
    this._call = call;
  }
}

export class SetEmergencyShutdownCall extends ethereum.Call {
  get inputs(): SetEmergencyShutdownCall__Inputs {
    return new SetEmergencyShutdownCall__Inputs(this);
  }

  get outputs(): SetEmergencyShutdownCall__Outputs {
    return new SetEmergencyShutdownCall__Outputs(this);
  }
}

export class SetEmergencyShutdownCall__Inputs {
  _call: SetEmergencyShutdownCall;

  constructor(call: SetEmergencyShutdownCall) {
    this._call = call;
  }

  get active(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetEmergencyShutdownCall__Outputs {
  _call: SetEmergencyShutdownCall;

  constructor(call: SetEmergencyShutdownCall) {
    this._call = call;
  }
}

export class SetGovernanceCall extends ethereum.Call {
  get inputs(): SetGovernanceCall__Inputs {
    return new SetGovernanceCall__Inputs(this);
  }

  get outputs(): SetGovernanceCall__Outputs {
    return new SetGovernanceCall__Outputs(this);
  }
}

export class SetGovernanceCall__Inputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }

  get _governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernanceCall__Outputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }
}

export class SetLockedProfitDegrationCall extends ethereum.Call {
  get inputs(): SetLockedProfitDegrationCall__Inputs {
    return new SetLockedProfitDegrationCall__Inputs(this);
  }

  get outputs(): SetLockedProfitDegrationCall__Outputs {
    return new SetLockedProfitDegrationCall__Outputs(this);
  }
}

export class SetLockedProfitDegrationCall__Inputs {
  _call: SetLockedProfitDegrationCall;

  constructor(call: SetLockedProfitDegrationCall) {
    this._call = call;
  }

  get degration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLockedProfitDegrationCall__Outputs {
  _call: SetLockedProfitDegrationCall;

  constructor(call: SetLockedProfitDegrationCall) {
    this._call = call;
  }
}

export class SetMinCapitalRequirementCall extends ethereum.Call {
  get inputs(): SetMinCapitalRequirementCall__Inputs {
    return new SetMinCapitalRequirementCall__Inputs(this);
  }

  get outputs(): SetMinCapitalRequirementCall__Outputs {
    return new SetMinCapitalRequirementCall__Outputs(this);
  }
}

export class SetMinCapitalRequirementCall__Inputs {
  _call: SetMinCapitalRequirementCall;

  constructor(call: SetMinCapitalRequirementCall) {
    this._call = call;
  }

  get newMCR(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinCapitalRequirementCall__Outputs {
  _call: SetMinCapitalRequirementCall;

  constructor(call: SetMinCapitalRequirementCall) {
    this._call = call;
  }
}

export class SetPerformanceFeeCall extends ethereum.Call {
  get inputs(): SetPerformanceFeeCall__Inputs {
    return new SetPerformanceFeeCall__Inputs(this);
  }

  get outputs(): SetPerformanceFeeCall__Outputs {
    return new SetPerformanceFeeCall__Outputs(this);
  }
}

export class SetPerformanceFeeCall__Inputs {
  _call: SetPerformanceFeeCall;

  constructor(call: SetPerformanceFeeCall) {
    this._call = call;
  }

  get fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPerformanceFeeCall__Outputs {
  _call: SetPerformanceFeeCall;

  constructor(call: SetPerformanceFeeCall) {
    this._call = call;
  }
}

export class SetWithdrawalQueueCall extends ethereum.Call {
  get inputs(): SetWithdrawalQueueCall__Inputs {
    return new SetWithdrawalQueueCall__Inputs(this);
  }

  get outputs(): SetWithdrawalQueueCall__Outputs {
    return new SetWithdrawalQueueCall__Outputs(this);
  }
}

export class SetWithdrawalQueueCall__Inputs {
  _call: SetWithdrawalQueueCall;

  constructor(call: SetWithdrawalQueueCall) {
    this._call = call;
  }

  get _queue(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetWithdrawalQueueCall__Outputs {
  _call: SetWithdrawalQueueCall;

  constructor(call: SetWithdrawalQueueCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateStrategyDebtRatioCall extends ethereum.Call {
  get inputs(): UpdateStrategyDebtRatioCall__Inputs {
    return new UpdateStrategyDebtRatioCall__Inputs(this);
  }

  get outputs(): UpdateStrategyDebtRatioCall__Outputs {
    return new UpdateStrategyDebtRatioCall__Outputs(this);
  }
}

export class UpdateStrategyDebtRatioCall__Inputs {
  _call: UpdateStrategyDebtRatioCall;

  constructor(call: UpdateStrategyDebtRatioCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _debtRatio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateStrategyDebtRatioCall__Outputs {
  _call: UpdateStrategyDebtRatioCall;

  constructor(call: UpdateStrategyDebtRatioCall) {
    this._call = call;
  }
}

export class UpdateStrategyMaxDebtPerHarvestCall extends ethereum.Call {
  get inputs(): UpdateStrategyMaxDebtPerHarvestCall__Inputs {
    return new UpdateStrategyMaxDebtPerHarvestCall__Inputs(this);
  }

  get outputs(): UpdateStrategyMaxDebtPerHarvestCall__Outputs {
    return new UpdateStrategyMaxDebtPerHarvestCall__Outputs(this);
  }
}

export class UpdateStrategyMaxDebtPerHarvestCall__Inputs {
  _call: UpdateStrategyMaxDebtPerHarvestCall;

  constructor(call: UpdateStrategyMaxDebtPerHarvestCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _maxDebtPerHarvest(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateStrategyMaxDebtPerHarvestCall__Outputs {
  _call: UpdateStrategyMaxDebtPerHarvestCall;

  constructor(call: UpdateStrategyMaxDebtPerHarvestCall) {
    this._call = call;
  }
}

export class UpdateStrategyMinDebtPerHarvestCall extends ethereum.Call {
  get inputs(): UpdateStrategyMinDebtPerHarvestCall__Inputs {
    return new UpdateStrategyMinDebtPerHarvestCall__Inputs(this);
  }

  get outputs(): UpdateStrategyMinDebtPerHarvestCall__Outputs {
    return new UpdateStrategyMinDebtPerHarvestCall__Outputs(this);
  }
}

export class UpdateStrategyMinDebtPerHarvestCall__Inputs {
  _call: UpdateStrategyMinDebtPerHarvestCall;

  constructor(call: UpdateStrategyMinDebtPerHarvestCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _minDebtPerHarvest(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateStrategyMinDebtPerHarvestCall__Outputs {
  _call: UpdateStrategyMinDebtPerHarvestCall;

  constructor(call: UpdateStrategyMinDebtPerHarvestCall) {
    this._call = call;
  }
}

export class UpdateStrategyPerformanceFeeCall extends ethereum.Call {
  get inputs(): UpdateStrategyPerformanceFeeCall__Inputs {
    return new UpdateStrategyPerformanceFeeCall__Inputs(this);
  }

  get outputs(): UpdateStrategyPerformanceFeeCall__Outputs {
    return new UpdateStrategyPerformanceFeeCall__Outputs(this);
  }
}

export class UpdateStrategyPerformanceFeeCall__Inputs {
  _call: UpdateStrategyPerformanceFeeCall;

  constructor(call: UpdateStrategyPerformanceFeeCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _performanceFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateStrategyPerformanceFeeCall__Outputs {
  _call: UpdateStrategyPerformanceFeeCall;

  constructor(call: UpdateStrategyPerformanceFeeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxLoss(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
